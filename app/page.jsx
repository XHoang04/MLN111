"use client";
import React, { useState, useEffect, useRef } from 'react';
import { User, Network, AlertCircle, Lightbulb, Smartphone, Users, Brain, ChevronDown, Globe, Wifi, MessageCircle, Send, X, Settings, Sparkles, Loader2 } from 'lucide-react';
import dynamic from "next/dynamic";

const SkyBackground = dynamic(() => import("./components/SkyBackground"), {
  ssr: false,
});

export default function BanChatConNguoi() {
  const [activeTab, setActiveTab] = useState('intro');
  const [scrollY, setScrollY] = useState(0);
  const [quizAnswer, setQuizAnswer] = useState(null);
  const [hoveredCard, setHoveredCard] = useState(null);
  const [chatOpen, setChatOpen] = useState(false);
  const [chatMessages, setChatMessages] = useState([
    { role: 'bot', text: 'Xin ch√†o! T√¥i l√† tr·ª£ l√Ω Tri·∫øt h·ªçc ƒë∆∞·ª£c h·ªó tr·ª£ b·ªüi AI. H√£y h·ªèi t√¥i b·∫•t c·ª© ƒëi·ªÅu g√¨! üß†‚ú®' }
  ]);
  const [inputMessage, setInputMessage] = useState('');
  const [isLoading, setIsLoading] = useState(false);
  const [apiKey, setApiKey] = useState('');
  const [showApiInput, setShowApiInput] = useState(false);
  const chatEndRef = useRef(null);

  useEffect(() => {
    const handleScroll = () => setScrollY(window.scrollY);
    window.addEventListener('scroll', handleScroll);
    return () => window.removeEventListener('scroll', handleScroll);
  }, []);

  const quizQuestion = {
    question: "Theo Marx, b·∫£n ch·∫•t con ng∆∞·ªùi l√† g√¨?",
    options: [
      { id: 'a', text: "C√°i tr·ª´u t∆∞·ª£ng c·ªë h·ªØu t·ª´ khi sinh ra", correct: false },
      { id: 'b', text: "T·ªïng h√≤a c√°c m·ªëi quan h·ªá x√£ h·ªôi", correct: true },
      { id: 'c', text: "B·∫£n nƒÉng sinh h·ªçc t·ª± nhi√™n", correct: false },
      { id: 'd', text: "L√Ω tr√≠ v√† tri th·ª©c c√° nh√¢n", correct: false }
    ]
  };

  const quickQuestions = [
    'Tri·∫øt h·ªçc M√°c-L√™nin l√† g√¨?',
    'B·∫£n ch·∫•t con ng∆∞·ªùi l√† g√¨?',
    'B·∫£n ch·∫•t con ng∆∞·ªùi theo c√°c tri·∫øt gia',
  ];

  const callAI = async (userMessage) => {
    try {
      const systemPrompt = `
        B·∫°n l√† m·ªôt tr·ª£ l√Ω TRI·∫æT H·ªåC chuy√™n s√¢u (Ti·∫øng Vi·ªát).
        - Ch·ªâ tr·∫£ l·ªùi c√°c c√¢u h·ªèi li√™n quan t·ªõi tri·∫øt h·ªçc.
        - N·∫øu c√¢u h·ªèi kh√¥ng li√™n quan, tr·∫£ l·ªùi: "T√¥i ch·ªâ tr·∫£ l·ªùi v·ªÅ tri·∫øt h·ªçc."
        - Tr·∫£ l·ªùi NG·∫ÆN G·ªåN: 1-2 c√¢u.
      `;

      const response = await fetch("/api/chat", {
        method: "POST",
        headers: { "Content-Type": "application/json" },
        body: JSON.stringify({ message: userMessage, systemPrompt }),
      });

      if (!response.ok) throw new Error("API n·ªôi b·ªô l·ªói");

      const data = await response.json();
      return data.choices?.[0]?.message?.content?.trim() || "Kh√¥ng c√≥ ph·∫£n h·ªìi.";
    } catch (err) {
      return `‚ùå ${err.message}`;
    }
  };

  const handleSendMessage = async () => {
    if (!inputMessage.trim() || isLoading) return;

    const userMsg = { role: 'user', text: inputMessage };
    setChatMessages(prev => [...prev, userMsg]);
    const currentInput = inputMessage;
    setInputMessage('');
    setIsLoading(true);

    setChatMessages(prev => [...prev, { role: 'bot', text: 'ü§î ƒêang suy nghƒ©...', isTyping: true }]);

    try {
      const aiResponse = await callAI(currentInput);
      
      setChatMessages(prev => {
        const withoutTyping = prev.filter(msg => !msg.isTyping);
        return [...withoutTyping, { role: 'bot', text: aiResponse }];
      });
    } catch (error) {
      setChatMessages(prev => {
        const withoutTyping = prev.filter(msg => !msg.isTyping);
        return [...withoutTyping, { 
          role: 'bot', 
          text: 'Xin l·ªói, c√≥ l·ªói x·∫£y ra. H√£y th·ª≠ l·∫°i!' 
        }];
      });
    } finally {
      setIsLoading(false);
    }
  };

  useEffect(() => {
    if (chatOpen && chatEndRef.current) {
      chatEndRef.current.scrollIntoView({ behavior: 'smooth' });
    }
  }, [chatMessages, chatOpen]);

  return (
    <div className="min-h-screen relative overflow-hidden">
      
      {/* üåå N·ªÅn 3D v·ªõi GLB */}
      <div className="fixed inset-0 w-full h-full -z-10">
        <SkyBackground />
      </div>

      {/* L·ªõp ph·ªß gradient nh·∫π ƒë·ªÉ text d·ªÖ ƒë·ªçc h∆°n */}
      <div className="fixed inset-0 bg-gradient-to-b from-black/40 via-transparent to-black/40 pointer-events-none -z-5"></div>

      {/* Header */}
      {/* Header - Thu nh·ªè l·∫°i */}
      <header 
        className="relative text-white py-12 overflow-hidden backdrop-blur-sm"
        style={{ 
          transform: `translateY(${scrollY * 0.3}px)`,
          background: 'linear-gradient(135deg, rgba(220,38,38,0.3), rgba(239,68,68,0.2), rgba(251,146,60,0.3))'
        }}
      >
        <div className="absolute inset-0 bg-gradient-to-r from-black/30 via-transparent to-black/30"></div>

        <div className="relative max-w-6xl mx-auto px-6 text-center">
          {/* Icon nh·ªè h∆°n */}
          <div className="inline-block mb-4 relative">
            <div className="absolute inset-0 bg-yellow-400 blur-xl opacity-40 animate-pulse"></div>
            <Brain className="w-14 h-14 mx-auto text-yellow-300 relative z-10 animate-bounce drop-shadow-2xl" />
          </div>
          
          {/* Title nh·ªè h∆°n */}
          <h1 className="text-4xl md:text-5xl font-bold mb-3 drop-shadow-2xl">
            <span className="bg-clip-text text-transparent bg-gradient-to-r from-white via-yellow-200 to-orange-200">
              B·∫£n ch·∫•t con ng∆∞·ªùi
            </span>
            <br />
            <span className="text-2xl md:text-3xl text-white/95">trong th·ªùi ƒë·∫°i s·ªë h√≥a</span>
          </h1>
          
          {/* Subtitle nh·ªè h∆°n */}
          <p className="text-base md:text-lg text-white/90 mb-5 font-light">
            G√≥c nh√¨n t·ª´ Tri·∫øt h·ªçc M√°c - L√™nin
          </p>

          {/* Tags nh·ªè h∆°n v√† s√°t l·∫°i */}
          <div className="flex flex-wrap items-center justify-center gap-2 text-xs md:text-sm">
            {[
              { icon: Users, text: "Quan h·ªá x√£ h·ªôi", color: "from-blue-500/80 to-cyan-500/80" },
              { icon: Network, text: "S·ªë h√≥a", color: "from-purple-500/80 to-pink-500/80" },
              { icon: Smartphone, text: "Tha h√≥a", color: "from-red-500/80 to-orange-500/80" },
              { icon: Globe, text: "K·∫øt n·ªëi to√†n c·∫ßu", color: "from-green-500/80 to-emerald-500/80" }
            ].map((tag, i) => {
              const Icon = tag.icon;
              return (
                <div 
                  key={i}
                  className={`group relative flex items-center bg-gradient-to-r ${tag.color} backdrop-blur-md px-4 py-2 rounded-full transform transition-all duration-300 hover:scale-110 shadow-lg border border-white/20`}
                  onMouseEnter={() => setHoveredCard(i)}
                  onMouseLeave={() => setHoveredCard(null)}
                >
                  <Icon className={`w-4 h-4 mr-2 transition-transform duration-300 ${hoveredCard === i ? 'rotate-180' : ''}`} />
                  <span className="font-semibold text-white">{tag.text}</span>
                </div>
              );
            })}
          </div>
        </div>
      </header>

      {/* Navigation - S√°t li·ªÅn header, kh√¥ng c√≥ kho·∫£ng tr·ªëng */}
      <nav className="sticky top-0 z-50 backdrop-blur-xl bg-gradient-to-b from-white/10 to-white/5 shadow-xl border-b border-white/10">
        <div className="max-w-6xl mx-auto px-6">
          <div className="flex justify-center space-x-2 py-3 flex-wrap gap-2">
            {[
              { id: 'intro', label: 'ƒê·∫∑t v·∫•n ƒë·ªÅ', icon: AlertCircle, color: 'from-red-500 to-orange-500' },
              { id: 'theory', label: 'L√Ω thuy·∫øt', icon: Lightbulb, color: 'from-yellow-500 to-orange-500' },
              { id: 'reality', label: 'Th·ª±c tr·∫°ng', icon: Network, color: 'from-purple-500 to-pink-500' },
              { id: 'conclusion', label: 'K·∫øt lu·∫≠n', icon: User, color: 'from-green-500 to-emerald-500' }
            ].map(tab => {
              const Icon = tab.icon;
              return (
                <button
                  key={tab.id}
                  onClick={() => setActiveTab(tab.id)}
                  className={`group relative flex items-center px-5 py-2.5 rounded-xl font-medium transition-all duration-300 text-sm ${
                    activeTab === tab.id
                      ? `bg-gradient-to-r ${tab.color} text-white shadow-lg scale-105`
                      : 'backdrop-blur-sm bg-white/10 text-white hover:bg-white/20 border border-white/30'
                  }`}
                >
                  <Icon className="w-4 h-4 mr-2" />
                  {tab.label}
                </button>
              );
            })}
          </div>
        </div>
      </nav>


      {/* Main Content */}
      <main className="relative max-w-6xl mx-auto px-6 py-6">
        {activeTab === 'intro' && (
          <div className="space-y-6 animate-slide-up">
            <div className="backdrop-blur-xl bg-white/5 rounded-3xl shadow-2xl p-10 border border-white/10">
              <div className="flex items-center mb-6">
                <div className="w-14 h-14 bg-gradient-to-br from-red-500 to-orange-500 rounded-2xl flex items-center justify-center mr-4 shadow-lg">
                  <AlertCircle className="w-7 h-7 text-white" />
                </div>
                <h2 className="text-4xl font-bold text-white">ƒê·∫∑t v·∫•n ƒë·ªÅ</h2>
              </div>
              
              <div className="relative backdrop-blur-md bg-gradient-to-r from-red-500/20 to-orange-500/20 border-l-4 border-red-400 p-8 mb-8 rounded-r-2xl">
                <p className="text-xl text-white leading-relaxed italic mb-4">
                  "B·∫£n ch·∫•t con ng∆∞·ªùi kh√¥ng ph·∫£i l√† c√°i tr·ª´u t∆∞·ª£ng c·ªë h·ªØu c·ªßa c√° nh√¢n ri√™ng bi·ªát, 
                  m√† l√† t·ªïng h√≤a nh·ªØng m·ªëi quan h·ªá x√£ h·ªôi."
                </p>
                <p className="text-right text-yellow-300 font-bold text-lg">‚Äî Karl Marx</p>
              </div>

              <div className="grid md:grid-cols-3 gap-6 mb-8">
                <div className="backdrop-blur-md bg-blue-500/20 p-6 rounded-2xl border border-blue-400/30 hover:border-blue-400/60 transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-blue-500/20">
                  <Smartphone className="w-12 h-12 text-blue-300 mb-3" />
                  <h4 className="text-white font-bold mb-2 text-lg">Giao ti·∫øp qua m√†n h√¨nh</h4>
                  <p className="text-gray-200 text-sm">Nhi·ªÅu h∆°n g·∫∑p m·∫∑t tr·ª±c ti·∫øp</p>
                </div>
                <div className="backdrop-blur-md bg-purple-500/20 p-6 rounded-2xl border border-purple-400/30 hover:border-purple-400/60 transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-purple-500/20">
                  <Users className="w-12 h-12 text-purple-300 mb-3" />
                  <h4 className="text-white font-bold mb-2 text-lg">Lao ƒë·ªông t·ª´ xa</h4>
                  <p className="text-gray-200 text-sm">Thay th·∫ø l√†m vi·ªác t·∫≠p th·ªÉ</p>
                </div>
                <div className="backdrop-blur-md bg-pink-500/20 p-6 rounded-2xl border border-pink-400/30 hover:border-pink-400/60 transition-all duration-300 hover:scale-105 hover:shadow-xl hover:shadow-pink-500/20">
                  <Network className="w-12 h-12 text-pink-300 mb-3" />
                  <h4 className="text-white font-bold mb-2 text-lg">Phi√™n b·∫£n s·ªë</h4>
                  <p className="text-gray-200 text-sm">B·∫£n th√¢n tr√™n kh√¥ng gian m·∫°ng</p>
                </div>
              </div>

              <div className="backdrop-blur-md bg-gradient-to-br from-yellow-500/20 to-orange-500/20 border border-yellow-400/40 rounded-2xl p-8">
                <h3 className="text-3xl font-bold text-yellow-300 mb-6">‚ùì C√¢u h·ªèi nghi√™n c·ª©u</h3>
                <div className="space-y-4 text-white text-lg">
                  <p>‚Ä¢ N·∫øu c√°c quan h·ªá x√£ h·ªôi l√† n·ªÅn t·∫£ng h√¨nh th√†nh b·∫£n ch·∫•t con ng∆∞·ªùi m√† gi·ªù ƒë√¢y ch√∫ng ng√†y c√†ng <span className="text-yellow-300 font-semibold">·∫£o h√≥a, phi v·∫≠t ch·∫•t h√≥a</span>...</p>
                  <p>‚Ä¢ Th√¨ <span className="text-yellow-300 font-semibold">b·∫£n ch·∫•t con ng∆∞·ªùi</span> c√≥ ƒëang b·ªã bi·∫øn ƒë·ªïi t·∫≠n g·ªëc r·ªÖ?</p>
                  <p>‚Ä¢ Li·ªáu con ng∆∞·ªùi c√≥ <span className="text-yellow-300 font-semibold">nguy c∆° ƒë√°nh m·∫•t</span> ch√≠nh b·∫£n ch·∫•t c·ªßa m√¨nh?</p>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'theory' && (
          <div className="space-y-6 animate-slide-up">
            <div className="backdrop-blur-xl bg-white/5 rounded-3xl shadow-2xl p-10 border border-white/10">
              <div className="flex items-center mb-8">
                <div className="w-14 h-14 bg-gradient-to-br from-yellow-500 to-orange-500 rounded-2xl flex items-center justify-center mr-4 shadow-lg">
                  <Lightbulb className="w-7 h-7 text-white" />
                </div>
                <h2 className="text-4xl font-bold text-white">Quan ƒëi·ªÉm Tri·∫øt h·ªçc M√°c - L√™nin</h2>
              </div>

              <div className="space-y-6">
                <div className="backdrop-blur-md bg-blue-500/15 p-8 rounded-2xl border border-blue-400/30 hover:shadow-xl hover:shadow-blue-500/20 transition-all">
                  <h3 className="text-3xl font-bold text-blue-300 mb-5">1. Con ng∆∞·ªùi v√† b·∫£n ch·∫•t con ng∆∞·ªùi</h3>
                  <div className="space-y-4 ml-6 text-lg">
                    <p className="text-white">‚Ä¢ <strong className="text-blue-200">B·∫£n ch·∫•t l·ªãch s·ª≠ - x√£ h·ªôi:</strong> Kh√¥ng c·ªë ƒë·ªãnh, ƒë∆∞·ª£c h√¨nh th√†nh qua l·ªãch s·ª≠</p>
                    <p className="text-white">‚Ä¢ <strong className="text-blue-200">T·ªïng h√≤a c√°c m·ªëi quan h·ªá x√£ h·ªôi:</strong> Qua quan h·ªá kinh t·∫ø, ch√≠nh tr·ªã, vƒÉn h√≥a...</p>
                    <p className="text-white">‚Ä¢ <strong className="text-blue-200">Th·ª±c ti·ªÖn lao ƒë·ªông:</strong> Ho·∫°t ƒë·ªông c∆° b·∫£n t·∫°o n√™n con ng∆∞·ªùi</p>
                  </div>
                </div>

                <div className="backdrop-blur-md bg-red-500/15 p-8 rounded-2xl border border-red-400/30 hover:shadow-xl hover:shadow-red-500/20 transition-all">
                  <h3 className="text-3xl font-bold text-red-300 mb-5">2. Hi·ªán t∆∞·ª£ng tha h√≥a con ng∆∞·ªùi</h3>
                  <div className="space-y-4 ml-6 text-lg">
                    <p className="text-white">‚Ä¢ <strong className="text-red-200">Kh√°i ni·ªám:</strong> S·∫£n ph·∫©m lao ƒë·ªông tr·ªü th√†nh xa l·∫° v·ªõi con ng∆∞·ªùi</p>
                    <p className="text-white">‚Ä¢ <strong className="text-red-200">Nguy√™n nh√¢n:</strong> Ch·∫ø ƒë·ªô t∆∞ h·ªØu, ph√¢n c√¥ng lao ƒë·ªông b·∫•t h·ª£p l√Ω</p>
                    <p className="text-white">‚Ä¢ <strong className="text-red-200">Bi·ªÉu hi·ªán:</strong> Con ng∆∞·ªùi b·ªã chi ph·ªëi b·ªüi s·∫£n ph·∫©m m√¨nh t·∫°o ra</p>
                  </div>
                </div>

                <div className="backdrop-blur-md bg-green-500/15 p-8 rounded-2xl border border-green-400/30 hover:shadow-xl hover:shadow-green-500/20 transition-all">
                  <h3 className="text-3xl font-bold text-green-300 mb-5">3. Gi·∫£i ph√≥ng con ng∆∞·ªùi</h3>
                  <div className="space-y-4 ml-6 text-lg">
                    <p className="text-white">‚Ä¢ <strong className="text-green-200">M·ª•c ti√™u:</strong> Gi·∫£i ph√≥ng kh·ªèi √°p b·ª©c, b√≥c l·ªôt</p>
                    <p className="text-white">‚Ä¢ <strong className="text-green-200">Con ƒë∆∞·ªùng:</strong> C√°ch m·∫°ng x√£ h·ªôi, x√¢y d·ª±ng CNXH</p>
                    <p className="text-white">‚Ä¢ <strong className="text-green-200">√ù nghƒ©a:</strong> Ph√°t tri·ªÉn to√†n di·ªán, t·ª± do s√°ng t·∫°o</p>
                  </div>
                </div>
              </div>
            </div>

            {/* Quiz */}
            <div className="backdrop-blur-md bg-purple-500/20 rounded-3xl p-10 border border-purple-400/40">
              <h3 className="text-3xl font-bold text-white mb-6">üß† Ki·ªÉm tra ki·∫øn th·ª©c</h3>
              <p className="text-white text-xl mb-6">{quizQuestion.question}</p>
              <div className="space-y-4">
                {quizQuestion.options.map(option => (
                  <button
                    key={option.id}
                    onClick={() => setQuizAnswer(option.id)}
                    className={`w-full text-left p-5 rounded-xl border-2 transition-all text-lg ${
                      quizAnswer === option.id
                        ? option.correct
                          ? 'bg-green-500/30 border-green-400 shadow-lg shadow-green-500/30'
                          : 'bg-red-500/30 border-red-400 shadow-lg shadow-red-500/30'
                        : 'bg-white/5 border-white/20 hover:bg-white/10 hover:border-white/40'
                    }`}
                  >
                    <span className="font-bold mr-3 text-white">{option.id.toUpperCase()}.</span>
                    <span className="text-white">{option.text}</span>
                  </button>
                ))}
              </div>
            </div>
          </div>
        )}

        {activeTab === 'reality' && (
          <div className="space-y-6 animate-slide-up">
            <div className="backdrop-blur-xl bg-white/5 rounded-3xl shadow-2xl p-10 border border-white/10">
              <div className="flex items-center mb-8">
                <div className="w-14 h-14 bg-gradient-to-br from-cyan-500 to-blue-500 rounded-2xl flex items-center justify-center mr-4 shadow-lg">
                  <Network className="w-7 h-7 text-white" />
                </div>
                <h2 className="text-4xl font-bold text-white">Ph√¢n t√≠ch theo Tri·∫øt h·ªçc M√°c - L√™nin</h2>
              </div>

              <div className="space-y-6">
                <div className="backdrop-blur-md bg-green-500/15 rounded-2xl p-8 border-l-4 border-green-400 hover:shadow-xl hover:shadow-green-500/20 transition-all">
                  <h4 className="font-bold text-2xl text-green-300 mb-4">‚úÖ 1. B·∫£n ch·∫•t con ng∆∞·ªùi C√ì thay ƒë·ªïi nh∆∞ng KH√îNG m·∫•t ƒëi</h4>
                  <p className="text-white text-lg leading-relaxed">
                    B·∫£n ch·∫•t con ng∆∞·ªùi v·∫´n l√† "t·ªïng h√≤a c√°c m·ªëi quan h·ªá x√£ h·ªôi", ch·ªâ l√† c√°c m·ªëi quan h·ªá n√†y c√≥ h√¨nh th·ª©c m·ªõi trong th·ªùi ƒë·∫°i s·ªë.
                  </p>
                </div>

                <div className="backdrop-blur-md bg-orange-500/15 rounded-2xl p-8 border-l-4 border-orange-400 hover:shadow-xl hover:shadow-orange-500/20 transition-all">
                  <h4 className="font-bold text-2xl text-orange-300 mb-4">‚ö†Ô∏è 2. Nguy c∆° tha h√≥a m·ªõi trong th·ªùi ƒë·∫°i s·ªë</h4>
                  <p className="text-white text-lg leading-relaxed">
                    Con ng∆∞·ªùi b·ªã chi ph·ªëi b·ªüi thu·∫≠t to√°n, m·∫°ng x√£ h·ªôi - t∆∞∆°ng t·ª± nh∆∞ b·ªã chi ph·ªëi b·ªüi m√°y m√≥c trong th·ªùi ƒë·∫°i c√¥ng nghi·ªáp.
                  </p>
                </div>

                <div className="backdrop-blur-md bg-purple-500/15 rounded-2xl p-8 border-l-4 border-purple-400 hover:shadow-xl hover:shadow-purple-500/20 transition-all">
                  <h4 className="font-bold text-2xl text-purple-300 mb-4">üí™ 3. Con ng∆∞·ªùi v·∫´n l√† "ch·ªß th·ªÉ" c·ªßa l·ªãch s·ª≠</h4>
                  <p className="text-white text-lg leading-relaxed">
                    C√¥ng ngh·ªá do con ng∆∞·ªùi t·∫°o ra, n√™n con ng∆∞·ªùi c√≥ kh·∫£ nƒÉng ƒë·ªãnh h∆∞·ªõng, ki·ªÉm so√°t n√≥.
                  </p>
                </div>
              </div>
            </div>
          </div>
        )}

        {activeTab === 'conclusion' && (
          <div className="space-y-6 animate-slide-up">
            <div className="backdrop-blur-xl bg-white/5 rounded-3xl shadow-2xl p-10 border border-white/10">
              <div className="flex items-center mb-8">
                <div className="w-14 h-14 bg-gradient-to-br from-green-500 to-emerald-500 rounded-2xl flex items-center justify-center mr-4 shadow-lg">
                  <User className="w-7 h-7 text-white" />
                </div>
                <h2 className="text-4xl font-bold text-white">K·∫øt lu·∫≠n</h2>
              </div>

              <div className="space-y-6">
                <div className="backdrop-blur-md bg-green-500/15 border-l-4 border-green-400 p-10 rounded-r-2xl">
                  <h3 className="font-bold text-3xl text-green-300 mb-6">‚úÖ Tr·∫£ l·ªùi c√¢u h·ªèi nghi√™n c·ª©u</h3>
                  <div className="space-y-5">
                    <div className="backdrop-blur-sm bg-green-500/20 p-6 rounded-xl border border-green-400/30">
                      <p className="text-green-200 font-bold mb-3 text-xl">1. B·∫£n ch·∫•t con ng∆∞·ªùi c√≥ b·ªã bi·∫øn ƒë·ªïi t·∫≠n g·ªëc r·ªÖ?</p>
                      <p className="text-white text-lg">‚Üí KH√îNG. B·∫£n ch·∫•t v·∫´n l√† "t·ªïng h√≤a c√°c m·ªëi quan h·ªá x√£ h·ªôi", ch·ªâ l√† h√¨nh th·ª©c m·ªõi.</p>
                    </div>
                    <div className="backdrop-blur-sm bg-green-500/20 p-6 rounded-xl border border-green-400/30">
                      <p className="text-green-200 font-bold mb-3 text-xl">2. Con ng∆∞·ªùi c√≥ nguy c∆° ƒë√°nh m·∫•t b·∫£n ch·∫•t?</p>
                      <p className="text-white text-lg">‚Üí C√ì nguy c∆° tha h√≥a m·ªõi, nh∆∞ng KH√îNG ƒë√°nh m·∫•t ho√†n to√†n n·∫øu c√≥ h√†nh ƒë·ªông ƒë√∫ng ƒë·∫Øn.</p>
                    </div>
                  </div>
                </div>

                <div className="backdrop-blur-md bg-gradient-to-r from-red-500/20 to-orange-500/20 rounded-2xl p-10 border border-orange-400/40">
                  <h3 className="font-bold text-3xl text-yellow-300 mb-6">üéØ Th√¥ng ƒëi·ªáp</h3>
                  <p className="text-white leading-relaxed italic text-xl">
                    "C√¥ng ngh·ªá s·ªë l√† c√¥ng c·ª•, kh√¥ng ph·∫£i m·ª•c ƒë√≠ch. Con ng∆∞·ªùi ph·∫£i l√† trung t√¢m, 
                    l√† ch·ªß th·ªÉ c·ªßa m·ªçi s·ª± ph√°t tri·ªÉn. Ch√∫ng ta c·∫ßn ·ª©ng d·ª•ng tri·∫øt h·ªçc M√°c - L√™nin 
                    ƒë·ªÉ ƒë·ªãnh h∆∞·ªõng c√¥ng ngh·ªá ph·ª•c v·ª• con ng∆∞·ªùi, thay v√¨ ƒë·ªÉ con ng∆∞·ªùi tr·ªü th√†nh n√¥ l·ªá c·ªßa c√¥ng ngh·ªá."
                  </p>
                </div>
              </div>
            </div>

            <div className="relative backdrop-blur-md bg-gradient-to-r from-red-500/30 via-orange-500/30 to-yellow-500/30 rounded-2xl p-6 text-center overflow-hidden shadow-xl border border-white/20 max-w-2xl mx-auto">             
               <div className="relative">  
                <div className="text-4xl mb-3 animate-bounce">üéì</div>
                <h3 className="text-2xl font-bold text-white mb-3 drop-shadow-lg">
                  C·∫£m ∆°n m·ªçi ng∆∞·ªùi ƒë√£ theo d√µi!
                </h3>
              </div>
            </div>
          </div>
        )}
      </main>

      {/* AI Chatbot Button */}
      <button
        onClick={() => setChatOpen(!chatOpen)}
        className="fixed bottom-6 right-6 z-50 w-16 h-16 bg-gradient-to-br from-purple-600 to-pink-600 rounded-full shadow-2xl flex items-center justify-center hover:scale-110 transition-transform duration-300 group"
      >
        {chatOpen ? (
          <X className="w-8 h-8 text-white" />
        ) : (
          <>
            <MessageCircle className="w-8 h-8 text-white" />
            <div className="absolute -top-1 -right-1 w-4 h-4 bg-red-500 rounded-full animate-pulse"></div>
          </>
        )}
        <div className="absolute inset-0 bg-purple-400 rounded-full blur-xl opacity-50 group-hover:opacity-75 transition-opacity"></div>
      </button>

      {/* Chatbot Window - GI·ªÆ NGUY√äN CODE C·ª¶A B·∫†N */}
      {chatOpen && (
        <div className="fixed bottom-24 right-6 z-50 w-96 h-[600px] backdrop-blur-xl bg-gray-900/90 rounded-2xl shadow-2xl border border-purple-500/50 flex flex-col overflow-hidden animate-slide-up">
          {/* Header */}
          <div className="bg-gradient-to-r from-purple-600 to-pink-600 p-4 flex items-center justify-between">
            <div className="flex items-center">
              <div className="relative">
                <Brain className="w-8 h-8 text-white" />
                <div className="absolute -bottom-1 -right-1 w-3 h-3 bg-green-400 rounded-full border-2 border-purple-600"></div>
              </div>
              <div className="ml-3">
                <h3 className="text-white font-bold">Tr·ª£ l√Ω Tri·∫øt h·ªçc AI</h3>
              </div>
            </div>
        
          </div>

          {/* API Key Input */}
          {showApiInput && (
            <div className="bg-gray-800/90 backdrop-blur-md border-b border-gray-700 p-4 space-y-3">
              <div>
                <label className="text-gray-300 text-sm mb-2 block">API Key (OpenRouter)</label>
                <input
                  type="password"
                  value={apiKey}
                  onChange={(e) => setApiKey(e.target.value)}
                  placeholder="sk-or-v1-..."
                  className="w-full bg-gray-700/80 text-white px-3 py-2 rounded-lg border border-gray-600 focus:border-purple-500 focus:outline-none text-sm"
                />
              </div>
            </div>
          )}

          {/* Messages */}
          <div className="flex-1 overflow-y-auto p-4 space-y-4">
            {chatMessages.map((msg, idx) => (
              <div
                key={idx}
                className={`flex ${msg.role === 'user' ? 'justify-end' : 'justify-start'}`}
              >
                <div
                  className={`max-w-[80%] rounded-2xl p-4 ${
                    msg.role === 'user'
                      ? 'bg-gradient-to-br from-purple-600 to-pink-600 text-white'
                      : 'backdrop-blur-md bg-white/10 text-gray-100 border border-white/20'
                  }`}
                >
                  {msg.isTyping ? (
                    <div className="flex items-center space-x-2">
                      <Loader2 className="w-4 h-4 animate-spin" />
                      <span>{msg.text}</span>
                    </div>
                  ) : (
                    <p className="text-sm leading-relaxed whitespace-pre-wrap">{msg.text}</p>
                  )}
                </div>
              </div>
            ))}
            <div ref={chatEndRef} />
          </div>

          {/* Quick Questions */}
          {chatMessages.length <= 2 && (
            <div className="backdrop-blur-md bg-gray-800/80 border-t border-gray-700/50 p-3 overflow-x-auto">
              <div className="flex gap-2 pb-2">
                {quickQuestions.map((q, idx) => (
                  <button
                    key={idx}
                    onClick={() => setInputMessage(q)}
                    className="flex-shrink-0 backdrop-blur-sm bg-white/10 hover:bg-white/20 text-gray-300 text-xs px-3 py-2 rounded-lg border border-white/20 transition-colors whitespace-nowrap"
                  >
                    {q}
                  </button>
                ))}
              </div>
            </div>
          )}

          {/* Input */}
          <div className="backdrop-blur-md bg-gray-800/90 border-t border-gray-700/50 p-4">
            <div className="flex items-center space-x-2">
              <input
                type="text"
                value={inputMessage}
                onChange={(e) => setInputMessage(e.target.value)}
                onKeyPress={(e) => e.key === 'Enter' && handleSendMessage()}
                placeholder="H·ªèi v·ªÅ tri·∫øt h·ªçc..."
                disabled={isLoading}
                className="flex-1 backdrop-blur-sm bg-white/10 text-white px-4 py-3 rounded-xl border border-white/20 focus:border-purple-500 focus:outline-none disabled:opacity-50"
              />
              <button
                onClick={handleSendMessage}
                disabled={isLoading || !inputMessage.trim()}
                className="bg-gradient-to-r from-purple-600 to-pink-600 text-white p-3 rounded-xl hover:opacity-90 transition-opacity disabled:opacity-50 disabled:cursor-not-allowed shadow-lg"
              >
                {isLoading ? (
                  <Loader2 className="w-5 h-5 animate-spin" />
                ) : (
                  <Send className="w-5 h-5" />
                )}
              </button>
            </div>
          </div>
        </div>
      )}

      <style jsx>{`
        @keyframes slide-up {
          from {
            opacity: 0;
            transform: translateY(30px);
          }
          to {
            opacity: 1;
            transform: translateY(0);
          }
        }
        @keyframes gradient {
          0%, 100% {
            background-position: 0% 50%;
          }
          50% {
            background-position: 100% 50%;
          }
        }
        .animate-slide-up {
          animation: slide-up 0.4s ease-out;
        }
        .animate-gradient {
          background-size: 200% 200%;
          animation: gradient 3s ease infinite;
        }
      `}</style>
    </div>
  );
}
